

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri Oct 25 10:57:11 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	10F200
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=ENTRY,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	jmp_tab,global,class=ENTRY,delta=2
    10                           	dabs	1,0x1C,4
    11  0000                     
    12                           ; Version 2.10
    13                           ; Generated 31/07/2019 GMT
    14                           ; 
    15                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC10F200 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53                           
    54                           	psect	cinit
    55  001                     start_initialization:	
    56                           ; #config settings
    57                           
    58  001                     __initialization:	
    59  001                     end_of_initialization:	
    60                           ;End of C runtime variable initialization code
    61                           
    62  001                     __end_of__initialization:	
    63  001  0064               	clrf	4
    64  002  0A38               	ljmp	_main	;jump to C main() function
    65                           
    66                           	psect	cstackCOMMON
    67  000                     __pcstackCOMMON:	
    68  000                     ??_main:	
    69                           
    70                           	psect	cstackBANK0
    71  010                     __pcstackBANK0:	
    72                           ; 1 bytes @ 0x0
    73                           
    74  010                     ?_main:	
    75  010                     ?_CalcSum:	
    76                           ; 1 bytes @ 0x0
    77                           
    78  010                     CalcSum@n:	
    79                           ; 2 bytes @ 0x0
    80                           
    81                           
    82                           ; 2 bytes @ 0x0
    83  010                     	ds	2
    84  012                     ??_CalcSum:	
    85                           
    86                           ; 1 bytes @ 0x2
    87  012                     	ds	1
    88  013                     CalcSum@sum:	
    89                           
    90                           ; 2 bytes @ 0x3
    91  013                     	ds	2
    92  015                     CalcSum@i:	
    93                           
    94                           ; 2 bytes @ 0x5
    95  015                     	ds	2
    96  017                     main@sum:	
    97                           
    98                           ; 2 bytes @ 0x7
    99  017                     	ds	2
   100  019                     main@result:	
   101                           
   102                           ; 2 bytes @ 0x9
   103  019                     	ds	2
   104                           
   105                           	psect	maintext
   106  038                     __pmaintext:	
   107 ;;
   108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   109 ;;
   110 ;; *************** function _main *****************
   111 ;; Defined at:
   112 ;;		line 4 in file "newmain.c"
   113 ;; Parameters:    Size  Location     Type
   114 ;;		None
   115 ;; Auto vars:     Size  Location     Type
   116 ;;  result          2    9[BANK0 ] int 
   117 ;;  sum             2    7[BANK0 ] int 
   118 ;; Return value:  Size  Location     Type
   119 ;;                  1    6[None  ] void 
   120 ;; Registers used:
   121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+1, btemp+2, btemp+3, pclath, cstack
   122 ;; Tracked objects:
   123 ;;		On entry : B00/0
   124 ;;		On exit  : 0/0
   125 ;;		Unchanged: 0/0
   126 ;; Data sizes:     COMMON   BANK0
   127 ;;      Params:         0       0
   128 ;;      Locals:         0       4
   129 ;;      Temps:          0       0
   130 ;;      Totals:         0       4
   131 ;;Total ram usage:        4 bytes
   132 ;; Hardware stack levels required when called:    1
   133 ;; This function calls:
   134 ;;		_CalcSum
   135 ;; This function is called by:
   136 ;;		Startup code after reset
   137 ;; This function uses a non-reentrant model
   138 ;;
   139                           
   140                           
   141                           ;psect for function _main
   142  038                     _main:	
   143  038                     l558:	
   144                           ;incstack = 0
   145                           ; Regs used in _main: [wreg-fsr0h+status,2-btemp+3+pclath+cstack]
   146                           
   147                           
   148                           ;newmain.c: 5:  int result = 0;
   149  038  0079               	clrf	main@result
   150  039  007A               	clrf	main@result+1
   151  03A                     l560:	
   152                           
   153                           ;newmain.c: 6:  result = result + 5;
   154  03A  021A               	movf	main@result+1,w
   155  03B  003D               	movwf	btemp+1
   156  03C  0219               	movf	main@result,w
   157  03D  003C               	movwf	btemp
   158  03E  0C05               	movlw	5
   159  03F  01DC               	addwf	wtemp0,w
   160  040  0039               	movwf	main@result
   161  041  021D               	movf	wtemp0+1,w
   162  042  003A               	movwf	main@result+1
   163  043  0603               	skipnc
   164  044  02BA               	incf	main@result+1,f
   165  045  0C00               	movlw	0
   166  046  01FA               	addwf	main@result+1,f
   167  047                     l562:	
   168                           
   169                           ;newmain.c: 7:  int sum = CalcSum(3);
   170  047  0C03               	movlw	3
   171  048  0030               	movwf	CalcSum@n
   172  049  0C00               	movlw	0
   173  04A  0031               	movwf	CalcSum@n+1
   174  04B  09FE               	fcall	entry__CalcSum
   175  04C  0211               	movf	?_CalcSum+1,w
   176  04D  0038               	movwf	main@sum+1
   177  04E  0210               	movf	?_CalcSum,w
   178  04F  0037               	movwf	main@sum
   179  050                     l564:	
   180  050                     l7:	
   181                           ;newmain.c: 9:  while(1);
   182                           
   183  050                     l8:	
   184  050  0A50               	goto	l7
   185  051  0A00               	ljmp	start
   186  052                     __end_of_main:	
   187                           
   188                           	psect	text1
   189  003                     __ptext1:	
   190 ;; *************** function _CalcSum *****************
   191 ;; Defined at:
   192 ;;		line 12 in file "newmain.c"
   193 ;; Parameters:    Size  Location     Type
   194 ;;  n               2    0[BANK0 ] int 
   195 ;; Auto vars:     Size  Location     Type
   196 ;;  i               2    5[BANK0 ] int 
   197 ;;  sum             2    3[BANK0 ] int 
   198 ;; Return value:  Size  Location     Type
   199 ;;                  2    0[BANK0 ] int 
   200 ;; Registers used:
   201 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+1, btemp+2, btemp+3
   202 ;; Tracked objects:
   203 ;;		On entry : 0/0
   204 ;;		On exit  : 0/0
   205 ;;		Unchanged: 0/0
   206 ;; Data sizes:     COMMON   BANK0
   207 ;;      Params:         0       2
   208 ;;      Locals:         0       4
   209 ;;      Temps:          0       1
   210 ;;      Totals:         0       7
   211 ;;Total ram usage:        7 bytes
   212 ;; Hardware stack levels used:    1
   213 ;; This function calls:
   214 ;;		Nothing
   215 ;; This function is called by:
   216 ;;		_main
   217 ;; This function uses a non-reentrant model
   218 ;;
   219                           
   220                           
   221                           ;psect for function _CalcSum
   222  003                     _CalcSum:	
   223  003                     l546:	
   224                           
   225                           ;newmain.c: 12: int CalcSum(int n);newmain.c: 13: {;newmain.c: 14:  int sum = 0;
   226  003  0073               	clrf	CalcSum@sum
   227  004  0074               	clrf	CalcSum@sum+1
   228                           
   229                           ;newmain.c: 15:  for(int i = 0; i < n; i++)
   230  005  0075               	clrf	CalcSum@i
   231  006  0076               	clrf	CalcSum@i+1
   232  007  0A1D               	goto	l552
   233  008                     l548:	
   234                           
   235                           ;newmain.c: 16:  {;newmain.c: 17:  sum = sum + i;
   236  008  0216               	movf	CalcSum@i+1,w
   237  009  003D               	movwf	btemp+1
   238  00A  0215               	movf	CalcSum@i,w
   239  00B  003C               	movwf	btemp
   240  00C  021C               	movf	wtemp0,w
   241  00D  01D3               	addwf	CalcSum@sum,w
   242  00E  0033               	movwf	CalcSum@sum
   243  00F  021D               	movf	wtemp0+1,w
   244  010  0603               	skipnc
   245  011  029D               	incf	wtemp0+1,w
   246  012  01D4               	addwf	CalcSum@sum+1,w
   247  013  0034               	movwf	CalcSum@sum+1
   248  014                     l550:	
   249                           
   250                           ;newmain.c: 18:  }
   251  014  0C01               	movlw	1
   252  015  003C               	movwf	btemp
   253  016  007D               	clrf	btemp+1
   254  017  021C               	movf	wtemp0,w
   255  018  01F5               	addwf	CalcSum@i,f
   256  019  0603               	skipnc
   257  01A  02B6               	incf	CalcSum@i+1,f
   258  01B  021D               	movf	wtemp0+1,w
   259  01C  01F6               	addwf	CalcSum@i+1,f
   260  01D                     l552:	
   261  01D  0211               	movf	CalcSum@n+1,w
   262  01E  003D               	movwf	btemp+1
   263  01F  0210               	movf	CalcSum@n,w
   264  020  003C               	movwf	btemp
   265  021  0216               	movf	CalcSum@i+1,w
   266  022  003F               	movwf	btemp+3
   267  023  0215               	movf	CalcSum@i,w
   268  024  003E               	movwf	btemp+2
   269  025  021F               	movf	wtemp1+1,w
   270  026  0F80               	xorlw	128
   271  027  0032               	movwf	??_CalcSum
   272  028  021D               	movf	wtemp0+1,w
   273  029  0F80               	xorlw	128
   274  02A  0092               	subwf	??_CalcSum,w
   275  02B  0743               	skipz
   276  02C  0A2F               	goto	u25
   277  02D  021C               	movf	wtemp0,w
   278  02E  009E               	subwf	wtemp1,w
   279  02F                     u25:	
   280  02F  0703               	skipc
   281  030  0A32               	goto	u21
   282  031  0A33               	goto	u20
   283  032                     u21:	
   284  032  0A08               	goto	l548
   285  033                     u20:	
   286  033                     l554:	
   287                           
   288                           ;newmain.c: 19:  return sum;
   289  033  0214               	movf	CalcSum@sum+1,w
   290  034  0031               	movwf	?_CalcSum+1
   291  035  0213               	movf	CalcSum@sum,w
   292  036  0030               	movwf	?_CalcSum
   293  037                     l16:	
   294  037  0800               	retlw	0
   295  038                     __end_of_CalcSum:	
   296  001C                     btemp	set	28	;btemp
   297  001C                     wtemp0	set	28
   298  001E                     wtemp1	set	30
   299  001C                     ttemp0	set	28
   300  001C                     ltemp0	set	28
   301                           
   302                           	psect	jmp_tab
   303  0FE                     __pjmp_tab:	
   304                           ;incstack = 0
   305                           ; Regs used in _CalcSum: [wreg-fsr0h+status,2-btemp+3]
   306                           
   307  0FE                     entry__CalcSum:	
   308  0FE  0A03               	ljmp	_CalcSum


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            14     11      11

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_CalcSum

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     238
                                              7 BANK0      4     4      0
                            _CalcSum
 ---------------------------------------------------------------------------------
 (1) _CalcSum                                              7     5      2     190
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CalcSum

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
STACK                0      0       0       2        0.0%
BANK0                E      B       B       3       78.6%
ABS                  0      0       0       4        0.0%
DATA                 0      0       0       5        0.0%
BITBANK0             E      0       0       6        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri Oct 25 10:57:11 2019

                      l7 0050                        l8 0050                       l16 0037  
                     u20 0033                       u21 0032                       u25 002F  
                     fsr 0004                      l550 0014                      l552 001D  
                    l560 003A                      l554 0033                      l546 0003  
                    l562 0047                      l548 0008                      l564 0050  
                    l558 0038                     _main 0038                     btemp 001C  
        __end_of_CalcSum 0038                     start 0000                    ?_main 0010  
                  ltemp0 001C                    ttemp0 001C                    wtemp0 001C  
                  wtemp1 001E          __initialization 0001             __end_of_main 0052  
                 ??_main 0000                ??_CalcSum 0012  __end_of__initialization 0001  
         __pcstackCOMMON 0000               __pmaintext 0038                  _CalcSum 0003  
                __ptext1 0003                  main@sum 0017     end_of_initialization 0001  
             main@result 0019      start_initialization 0001                ___latbits 0000  
          __pcstackBANK0 0010                 ?_CalcSum 0010                __pjmp_tab 00FE  
               CalcSum@i 0015                 CalcSum@n 0010         __size_of_CalcSum 0035  
          entry__CalcSum 00FE               CalcSum@sum 0013            __size_of_main 001A  
